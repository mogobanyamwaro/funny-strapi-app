apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-volume
  namespace: amaka
spec:
  storageClassName: manual
  capacity:
    storage: { { .Values.postgres.storage } }
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: amaka
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: { { .Values.postgres.storage } }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: amaka
data:
  POSTGRES_DB: { { .Values.postgres.database.name } }
  POSTGRES_USER: { { .Values.postgres.database.user } }
  POSTGRES_PASSWORD: { { .Values.postgres.database.password } }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: amaka
spec:
  replicas: { { .Values.replicaCount } }
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: { { .Values.postgres.image } }
          ports:
            - containerPort: { { .Values.postgres.containerPort } }
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: amaka
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  clusterIP: None
